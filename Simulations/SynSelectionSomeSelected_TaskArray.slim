// set up a simple neutral simulation
initialize() {

	// This are the beginning parameters for the syn selection coeffitient and proportion of selected syn mutations.
	// syn_s = asFloat(10E-4); // Range from 10E-4 to 10E-2, specified in the input by -d
	syn_nonselected_prop = asFloat(0); // Percentage of syn non-selected. For the future.
	defineConstant("path","/u/project/klohmuel/amzurita/Synonimous_Selection_Simulations/sym_outputs"); //insert path, for the output
	defineConstant("name_append",run_name_output);

	//For SLIM
	//run_name_output="Test";
	//name_append="Test";
	//syn_s = asFloat(10E-4);

	//debugging
	print(path);
	print(name_append);
	towrite = paste("syn_sfs_", name_append, "sample_size", ".tsv", sep = "");
	fullpath = paste(path, towrite, sep = "/");
	print(towrite);
	print(fullpath);

	// set the mutation rate
	initializeMutationRate(1.5e-8);

	//total sequence length. Given this lenght, we expect 1.5 muts per individual per generation.
	defineConstant("seqLength", 100000000);

	// Initializing mutation types. What are this types?
	//m1: Synonimous muts.
	initializeMutationType("m1", 0.5, "f", syn_s);

	//m2 mutation type: deleterious
	initializeMutationType("m2", 0.5,"g", -0.01314833,0.186);

	//m3: Syn muts that have no selection coeffitient. For the future.
	initializeMutationType("m3", 0.5, "f", 0.0);

	//set ratio of NS:SYN as 2.31:1 but with 3.1% of NS muts as neutral
	//22% of SYN mutations are selected for, while the rest of the mutations are not selected for
	initializeGenomicElementType("g1", c(m1, m2, m3), c(6.644, 69.8, 23.556));
	initializeGenomicElementType("g2", m1, 1); //This is suppose to be a non-coding element. They are ignored.
	initializeGenomicElementType("g3", m1, 1); //This is supposed to be an intron.

	// Generate random genes along the chromosome
	base = 0;
	nc_length_total = 0;
	in_length_total = 0;
	ex_length_total = 0;
	while (base < seqLength) {
		// make a non-coding region
		nc_length = asInteger(runif(1, 500, 50000));
		nc_length_total = nc_length_total + nc_length;

		//ignore noncoding elements for computational efficiency <--- reword probably
		//initializeGenomicElement(g2, base, base + nc_length - 1);
		base = base + nc_length;

		// make first exon
		ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1; ex_length_total = ex_length_total + ex_length;
		initializeGenomicElement(g1, base, base + ex_length - 1);
		base = base + ex_length;

		// make additional intron-exon pairs
		do {
			in_length = asInteger(rlnorm(1, log(100), log(1.5))) + 10; in_length_total = in_length_total + in_length;
			//initializeGenomicElement(g3, base, base + in_length - 1);
			base = base + in_length;
			ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1; ex_length_total = ex_length_total + ex_length;
			initializeGenomicElement(g1, base, base + ex_length - 1);
			base = base + ex_length;
		} while (runif(1) < 0.8);

	}

	// final non-coding region
	nc_length = asInteger(runif(1, 100, 5000));
	//initializeGenomicElement(g2, base, base + nc_length - 1);

	// uniform recombination along the chromosome
	initializeRecombinationRate(1e-8);
}

// create a population of 10000 individuals
1
{
	sim.addSubpop("p1", 10000);
}

// change the population size - could increase or decrease
100000 {    //100000
	p1.setSubpopulationSize(10000);
}

// run to generation 10100.
101000      //101000
{
	sim.simulationFinished();
}

//output SFS, for each generation
1:101000 late(){

	if (sim.generation % 5000 == 0) { print(sim.generation); }

}


// Output the SFSs at the end of the simulation for varing sample sizes
101000 late() {

	ss = c(10, 100, 1000);

	for (sample_size in ss) {

		sampledHaploidGenomes= sample(p1.genomes, sample_size); //get 10 genomes
		m1MutationsInSample=unique(sampledHaploidGenomes.mutationsOfType(m1)); //get unique m1 mutations in sample, returns vector of m1 mutations
		m1counts=sampledHaploidGenomes.mutationCountsInGenomes(mutations=m1MutationsInSample); //m1counts = integer vector w/ frequency counts of mutations, count for each 																																			position
		m2MutationsInSample=unique(sampledHaploidGenomes.mutationsOfType(m2)); //get unique m2 mutations in sample, returns vector of m2 mutations
		m2counts=sampledHaploidGenomes.mutationCountsInGenomes(mutations=m2MutationsInSample); //m1counts = integer vector w/ frequency counts of mutations, count for each 																																		position
		m3MutationsInSample=unique(sampledHaploidGenomes.mutationsOfType(m3)); //get unique m3 mutations in sample, returns vector of m3 mutations
		m3counts=sampledHaploidGenomes.mutationCountsInGenomes(mutations=m3MutationsInSample); //m1counts = integer vector w/ frequency counts of mutations, count for each 																																		position

		m1_sfs = c();
		m2_sfs = c();
		m3_sfs = c();

		for (i in seq(1,sample_size)){ //for 1 to 10 Not sure how this works, ask Chris

			count = sum(m1counts==i); //i = frequency, ex sum counts that equal 1, 2, 3, 4....10
			m1_sfs = c(m1_sfs, count);

			count = sum(m2counts==i);
			m2_sfs = c(m2_sfs, count);

			count = sum(m3counts==i);
			m3_sfs = c(m3_sfs, count);

		}


		//sfs for synonymous
		neu_sfs = m1_sfs + m3_sfs;
		neu_to_print = paste(asString(neu_sfs), sep = "	");
		towrite = paste("syn_sfs_", name_append, sample_size, ".tsv", sep = "");
		fullpath = paste(path, towrite, sep = "/");
		writeFile(fullpath, neu_to_print, append = T);

		//sfs for nonsynonymous
		del_sfs = m2_sfs;
		del_to_print = paste(asString(del_sfs), sep = "	");
		towrite = paste("nonsyn_sfs_", name_append, sample_size, ".tsv", sep = "");
		fullpath = paste(path, towrite, sep = "/");
		writeFile(fullpath, del_to_print, append = T);
		print("printed");

	}


}
