// set up a simple neutral simulation
initialize() {
	initializeMutationRate(1e-7);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	//total sequence length. Given this lenght, we expect 1.5 muts per individual per generation.
	defineConstant("seqLength", 100000000);	
	//Generate random genes along the chromosome, 100 times to get a sample of lenghts
	for (i in seq(1,100)){
		base = 0;
		nc_length_total = 0;
		in_length_total = 0;
		ex_length_total = 0;
		while (base < seqLength) {
			// make a non-coding region
			nc_length = asInteger(runif(1, 500, 50000)); 
			nc_length_total = nc_length_total + nc_length;
			
			//ignore noncoding elements for computational efficiency <--- reword probably
			//initializeGenomicElement(g2, base, base + nc_length - 1);
			base = base + nc_length;
			
			// make first exon
			ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1; ex_length_total = ex_length_total + ex_length;
			//initializeGenomicElement(g1, base, base + ex_length - 1);
			base = base + ex_length;
			
			// make additional intron-exon pairs
			do {
				in_length = asInteger(rlnorm(1, log(100), log(1.5))) + 10; in_length_total = in_length_total + in_length;
				//initializeGenomicElement(g3, base, base + in_length - 1);
				base = base + in_length;
				ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1; ex_length_total = ex_length_total + ex_length;
				//initializeGenomicElement(g1, base, base + ex_length - 1);
				base = base + ex_length;
			} while (runif(1) < 0.8); 
		
		}
		catn(ex_length_total);
	}	
	
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}

// create a population of 500 individuals
1 {
	sim.addSubpop("p1", 500);
}

// output samples of 10 genomes periodically, all fixed mutations at end
1000 late() { p1.outputSample(10); }
2000 late() { p1.outputSample(10); }
2000 late() { sim.outputFixedMutations(); }
